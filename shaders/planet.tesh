#version 450
#extension GL_ARB_tessellation_shader : enable

layout(triangles, equal_spacing) in;

in vec3 tc_position[];
in vec3 tc_normal[];
in vec3 tc_tangent[];
in vec2 tc_tex_coords[];

out vec3 te_position;
out vec3 te_tangent;
out vec3 te_normal;
out vec3 te_test;
out vec2 te_tex_coords;
out vec3 te_camera_position;
out vec3 te_lightPosition;

uniform mat4 model;
uniform mat4 translation;
uniform mat4 view;
uniform mat4 projection;
uniform float scale;
uniform float translate_x;
uniform float translate_y;

uniform vec3 camera_position;
uniform vec3 lightPosition;

uniform sampler2D texture1;
uniform sampler2D wave_dx;
uniform sampler2D wave_dy;
uniform sampler2D wave_dz;

vec3 lerp3D(vec3 v0, vec3 v1, vec3 v2)
{
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

vec3 calculate_normal(vec2 uv) {
	vec2 size = vec2(1.0,0.0);
	vec2 texelSize = 1.0 / textureSize(texture1, 0);

	float p0 = texture(texture1, vec2(uv.x, uv.y+texelSize.y)).x*10.0;
	float p1 = texture(texture1, vec2(uv.x, uv.y-texelSize.y)).x*10.0;
	float p2 = texture(texture1, vec2(uv.x+texelSize.x, uv.y)).x*10.0;
	float p3 = texture(texture1, vec2(uv.x-texelSize.x, uv.y)).x*10.0;
  
	return normalize(cross(normalize(vec3(size.xy, p1-p0)), normalize(vec3(size.yx, p3-p2))));
}

void main()
{
	vec3 position = normalize((vec4(lerp3D(tc_position[0],tc_position[1],tc_position[2]), 1.0)*translation).xyz);
	//vec3 position = lerp3D(tc_position[0],tc_position[1],tc_position[2]);

	vec2 p0 = gl_TessCoord.x * tc_tex_coords[0];
	vec2 p1 = gl_TessCoord.y * tc_tex_coords[1];
	vec2 p2 = gl_TessCoord.z * tc_tex_coords[2];
	te_tex_coords = (p0 + p1 + p2);

	
	te_tex_coords = (te_tex_coords*(scale/2.0));

	te_tex_coords.x += translate_y/2.0;
	te_tex_coords.y += translate_x/2.0;

	//vec3 norm = calculate_normal(te_tex_coords);
	

	vec3 height = texture(texture1, te_tex_coords).xyz/30.0;
	//if(length(height) < 0.1/10.0) {
	//	height = vec3(0.0, 0.0, 0.0);
	//}
	
	height.x = (position.x > 0.0) ? position.x+height.x :position.x-height.x;
	height.y = (position.y > 0.0) ? position.y+height.y :position.y-height.y;
	height.z = (position.z > 0.0) ? position.z+height.z :position.z-height.z;

	te_test = normalize(height);


	te_position = vec3(vec4(position, 1.0)).xyz;
    te_camera_position = camera_position;
    te_lightPosition = lightPosition;
	te_normal = lerp3D(tc_normal[0],tc_normal[1],tc_normal[2]);


	gl_Position = vec4(height, 1.0)*model*view*projection;
}
