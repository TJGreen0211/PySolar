#version 450
#extension GL_ARB_tessellation_shader : enable

layout(triangles, equal_spacing) in;

in vec3 tc_position[];
in vec3 tc_normal[];
in vec3 tc_tangent[];
in vec2 tc_tex_coords[];

out vec3 te_position;
out vec3 te_tangent;
out vec3 te_normal;
out vec3 te_test;
out vec2 te_tex_coords;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

uniform sampler2D texture1;
uniform sampler2D wave_dx;
uniform sampler2D wave_dy;
uniform sampler2D wave_dz;

vec3 lerp3D(vec3 v0, vec3 v1, vec3 v2)
{
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

vec3 calculate_normal(vec2 uv) {
	vec2 size = vec2(1.0,0.0);
	vec2 texelSize = 1.0 / textureSize(texture1, 0);

	float p0 = texture(texture1, vec2(uv.x, uv.y+texelSize.y)).x;
	float p1 = texture(texture1, vec2(uv.x, uv.y-texelSize.y)).x;
	float p2 = texture(texture1, vec2(uv.x+texelSize.x, uv.y)).x;
	float p3 = texture(texture1, vec2(uv.x-texelSize.x, uv.y)).x;

	return cross(normalize(vec3(size.xy, p1-p0)), normalize(vec3(size.yx, p3-p2)));
}

void main()
{
	vec3 position = lerp3D(tc_position[0],tc_position[1],tc_position[2]);

	vec2 p0 = gl_TessCoord.x * tc_tex_coords[0];
	vec2 p1 = gl_TessCoord.y * tc_tex_coords[1];
	vec2 p2 = gl_TessCoord.z * tc_tex_coords[2];
	te_tex_coords = p0 + p1 + p2;

	//te_tex_coords = position.xy;
	//te_tex_coords = vec2((atan(position.x, position.y) / 3.1415926 + 1.0) * 0.5,
    //	(asin(position.z) / 3.1415926 + 0.5));

	te_normal = calculate_normal(te_tex_coords);
	//te_normal = normalize(te_normal * 2.0 - 1.0);
	//mat3 normal_matrix = transpose(inverse(mat3(model)));
	//te_normal = lerp3D(tc_normal[0],tc_normal[1],tc_normal[2]);
	//te_normal = normalize(te_normal*normal_matrix);
	te_tangent = lerp3D(tc_tangent[0],tc_tangent[1],tc_tangent[2]);

	vec3 wave_dx_color = texture(wave_dx, te_tex_coords*2.0).rgb;
	vec3 wave_dy_color = texture(wave_dy, te_tex_coords*2.0).rgb;
	vec3 wave_dz_color = texture(wave_dz, te_tex_coords*2.0).rgb;

	//vec3 height = (wave_dx_color + wave_dy_color + wave_dz_color)/70.0;
	vec3 height = texture(texture1, te_tex_coords).xyz/30.0;
	te_test = abs(height);
	
	height.x = (position.x > 0.0) ? position.x+height.x :position.x-height.x;
	height.y = (position.y > 0.0) ? position.y+height.y :position.y-height.y;
	height.z = (position.z > 0.0) ? position.z+height.z :position.z-height.z;

	/*vec3 one = tc_position[1] - tc_position[0];
	vec3 two = tc_position[2] - tc_position[1];

	te_test = normalize(cross(one, two));*/

	//height = vec3(height.x, position.y+height.y, position.z+height.z);
	//vec3 p0 = gl_TessCoord.x * tc_position[0];
	//vec3 p1 = gl_TessCoord.y * tc_position[1];
	//vec3 p2 = gl_TessCoord.z * tc_position[2];
	//vec3 tePosition = p0 + p1 + p2;

	te_position = vec3(vec4(height, 1.0)*model).xyz;


	gl_Position = vec4(height, 1.0)*model*view*projection;
}
